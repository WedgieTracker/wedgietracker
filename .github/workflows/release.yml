name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest version
        id: latest
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT

      - name: Determine version bump
        id: version
        run: |
          LATEST_TAG=${{ steps.latest.outputs.latest_tag }}
          LATEST_VERSION=${LATEST_TAG}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"

          # Get commit messages since last tag
          COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s")

          # Initialize bump type
          BUMP="patch"

          # Check commit messages
          while IFS= read -r commit; do
            if [[ $commit == feat:* ]]; then
              BUMP="minor"
            elif [[ $commit == BREAKING* ]]; then
              BUMP="major"
              break
            fi
          done <<< "$COMMITS"

          # Calculate new version
          case $BUMP in
            "major")
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            "minor")
              NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
              ;;
            "patch")
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
              ;;
          esac

          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "New version will be: ${NEW_VERSION}"

      - name: Create Git tag
        run: |
          git tag ${{ steps.version.outputs.new_version }}
          git push origin ${{ steps.version.outputs.new_version }}

      - name: Generate Release Notes
        id: release_notes
        run: |
          # Get commit messages since last tag for release notes
          COMMITS=$(git log ${{ steps.latest.outputs.latest_tag }}..HEAD --pretty=format:"- %s")
          echo "COMMITS<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          release_name: ${{ steps.version.outputs.new_version }}
          body: |
            ## What's Changed
            ${{ steps.release_notes.outputs.COMMITS }}
          draft: false
          prerelease: false
