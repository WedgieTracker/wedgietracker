// @ts-nocheck

import { NextResponse } from "next/server";
import path from "path";
import fs from "fs";
import { downloadFile } from "~/server/utils/download";
import { processVideoForYoutube } from "~/server/utils/youtube";
import { isDev } from "~/config/dev-routes";

const BATCH_DIR = path.join(process.cwd(), "tmp", "batch-videos");

export async function POST(req: Request) {
  if (!isDev) {
    return NextResponse.json(
      { error: "Not available in production" },
      { status: 404 },
    );
  }

  const tempInputPath = path.join(BATCH_DIR, `input_${Date.now()}.mp4`);

  try {
    const formData = await req.formData();
    const videoUrl = formData.get("videoUrl") as string;
    const title = formData.get("title") as string;
    const description = formData.get("description") as string;

    console.log("Processing request:", {
      videoUrl,
      title,
      tempPath: tempInputPath,
    });

    // Ensure batch directory exists with proper permissions
    if (!fs.existsSync(BATCH_DIR)) {
      fs.mkdirSync(BATCH_DIR, { recursive: true, mode: 0o777 });
    }

    // Download video with error handling
    console.log("Downloading video...");
    try {
      await downloadFile(videoUrl, tempInputPath);
      console.log(
        "Download completed, file exists:",
        fs.existsSync(tempInputPath),
      );
      console.log("File size:", fs.statSync(tempInputPath).size);
    } catch (downloadError: unknown) {
      console.error("Download error:", downloadError);
      const error =
        downloadError instanceof Error
          ? downloadError
          : new Error("Unknown error");
      throw new Error(`Failed to download video: ${error.message}`);
    }

    // Process video
    console.log("Processing video...");
    const outputPath = path.join(
      BATCH_DIR,
      `${title.replace(/[^a-z0-9]/gi, "_")}.mp4`,
    );

    await processVideoForYoutube(tempInputPath, outputPath);

    // Save metadata
    const metadataPath = outputPath.replace(".mp4", ".txt");
    await fs.promises.writeFile(
      metadataPath,
      `Title: ${title}\nDescription: ${description}`,
    );

    return NextResponse.json({
      success: true,
      paths: {
        input: tempInputPath,
        output: outputPath,
      },
    });
  } catch (error: unknown) {
    console.error("Processing error:", error);
    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        details: {
          inputExists: fs.existsSync(tempInputPath),
          inputSize: fs.existsSync(tempInputPath)
            ? fs.statSync(tempInputPath).size
            : null,
        },
      },
      { status: 500 },
    );
  } finally {
    // Clean up input file
    if (fs.existsSync(tempInputPath)) {
      try {
        await fs.promises.unlink(tempInputPath);
      } catch (cleanupError) {
        console.error("Cleanup error:", cleanupError);
      }
    }
  }
}
